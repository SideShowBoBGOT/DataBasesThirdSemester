CREATE DATABASE course_work;
\c course_work

CREATE TABLE IF NOT EXISTS country (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	short_name varchar(3),
	name VARCHAR(40) 	
);

CREATE TABLE IF NOT EXISTS city (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40),
	country_id SERIAL
);

ALTER TABLE city ADD CONSTRAINT fk_country_city FOREIGN KEY(country_id)
REFERENCES country (id) ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS stadium (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40),
	city_id SERIAL
);

ALTER TABLE stadium ADD CONSTRAINT fk_city_stadium FOREIGN KEY(city_id)
REFERENCES city (id) ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS team (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40),
	country_id SERIAL
);

ALTER TABLE team ADD CONSTRAINT fk_country_team FOREIGN KEY(country_id)
REFERENCES country (id) ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS trainer (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40),
	team_id SERIAL
);

ALTER TABLE trainer ADD CONSTRAINT fk_team_trainer FOREIGN KEY(team_id)
REFERENCES team (id) ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS player_role (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS player (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	team_id SERIAL,
	name VARCHAR(40),
	player_role_id SERIAL,
	age INT,
	is_substitute bool
);

ALTER TABLE player ADD CONSTRAINT fk_player_role_player FOREIGN KEY(player_role_id)
REFERENCES player_role (id) ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS referee (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40),
	country_id SERIAL
);

ALTER TABLE referee ADD CONSTRAINT fk_country_referee FOREIGN KEY(country_id)
REFERENCES country (id) ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS match (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	stage varchar(1) check (stage IN ('Q', 'S', 'F')),
	first_time_start timestamp,
	first_time_end timestamp,
	second_time_start timestamp,
	second_time_end timestamp,
	is_extra_time bool,
	extra_time_start timestamp,
	extra_time_end timestamp,
	stadium_id SERIAL,
	first_team_id SERIAL,
	second_team_id SERIAL,
	referee_id SERIAL,
	first_assistant_id SERIAL,
	second_assistant_id SERIAL
);

ALTER TABLE match ADD CONSTRAINT fk_stadium_match FOREIGN KEY(stadium_id)
REFERENCES stadium (id) ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE match ADD CONSTRAINT fk_match_first_team 
FOREIGN KEY(first_team_id) REFERENCES team (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE match ADD CONSTRAINT fk_match_second_team 
FOREIGN KEY(second_team_id) REFERENCES team (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE match ADD CONSTRAINT fk_referee_match FOREIGN KEY(referee_id)
REFERENCES referee (id) ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE match ADD CONSTRAINT fk_first_assistant_match 
FOREIGN KEY(first_assistant_id) REFERENCES referee (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE match ADD CONSTRAINT fk_second_assistant_match 
FOREIGN KEY(second_assistant_id) REFERENCES referee (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE TABLE IF NOT EXISTS action_type (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(40)
);
	
CREATE TABLE IF NOT EXISTS action (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	action_time timestamp,
	reason VARCHAR(40),
	action_type_id SERIAL,
	player_id SERIAL,
	match_id SERIAL
);

ALTER TABLE action ADD CONSTRAINT fk_action_type_action 
FOREIGN KEY(action_type_id) REFERENCES action_type (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE action ADD CONSTRAINT fk_player_action 
FOREIGN KEY(player_id) REFERENCES player (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE action ADD CONSTRAINT fk_match_action 
FOREIGN KEY(match_id) REFERENCES match (id)
ON UPDATE CASCADE ON DELETE RESTRICT;

--awk 'BEGIN{FS=OFS=","}{print $3,$6}' FootballStadiums.csv | awk '{ gsub(/ /,""); print }' | uniq -c | awk 'NR>1{print $2}' | awk 'BEGIN{FS=OFS=","}{print NR, $1, $2}' > city.csv
--awk 'BEGIN{FS=OFS=","}{print $7,$6}' FootballStadiums.csv | awk '{ gsub(/ /,""); print }' | uniq -c | awk 'NR>1{print $2}' | awk 'BEGIN{FS=OFS=","}{print NR, $1, $2}' > country.csv
--STADIUMS
--sudo awk 'BEGIN{FS=OFS=","}{print $4,$6}' FootballStadiums.csv | awk '{ gsub(/ /,""); print }' | uniq -c | awk 'NR>1{print $2}'| awk 'BEGIN{FS=OFS=","} $1 !~ /-/{print $1,$2 }' | awk 'BEGIN{FS=OFS=","}{print NR, $1, $2}' | awk '{ gsub(/ /,""); print }' > rawTeam.csv

--ALLOW COPYING

-- join name and surname
-- paste shuffedNames.txt shuffedSurnames.txt -d " " > nameSurname.txt
-- awk 'NR<19664{print}' nameSurname.txt > ns.txt

-- awk 'BEGIN{FS=OFS=","}NR<=1560{print NR,$1}' namesSurnames.txt

cp '/home/choleraplague/university/DBThirdSemester/course_work/data/country.csv' '/tmp/country.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/city.csv' '/tmp/city.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/stadium.csv' '/tmp/stadium.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/team.csv' '/tmp/team.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/trainer.csv' '/tmp/trainer.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/player_role.sql' '/tmp/player_role.sql'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/player.csv' '/tmp/player.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/match.csv' '/tmp/match.csv'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/action_type.sql' '/tmp/action_type.sql'
cp '/home/choleraplague/university/DBThirdSemester/course_work/data/action.csv' '/tmp/action.csv'


\copy country FROM '/tmp/country.csv' DELIMITER ',' CSV;
\copy city FROM '/tmp/city.csv' DELIMITER ',' CSV;
\copy stadium FROM '/tmp/stadium.csv' DELIMITER ',' CSV;
\copy team FROM '/tmp/team.csv' DELIMITER ',' CSV;
\copy trainer FROM '/tmp/trainer.csv' DELIMITER ',' CSV;
psql -h localhost -d course_work -f '/tmp/player_role.sql'
\copy player FROM '/tmp/player.csv' DELIMITER ',' CSV;
\copy referee FROM '/tmp/referee.csv' DELIMITER ',' CSV;
\copy match FROM '/tmp/match.csv' DELIMITER ',' CSV;
psql -h localhost -d course_work -f '/tmp/action_type.sql'
\copy action FROM '/tmp/action.csv' DELIMITER ',' CSV;





